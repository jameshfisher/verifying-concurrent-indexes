\subsubsection{The index \API}

It isn't surprising, then, that
  almost every programming language has an index data type.\cite{wp_mapping}
(Indeed, in some languages, such as Javascript\footnotemark,
  all objects are indexes.)
With its appealingly intuitive interface,
  the programmer can memoize the results of a function,
  model the houses on her street,
  or describe a directed graph.
She might, for another example, cache the Web,
  simply with:\footnotemark

\footnotetext{\cite{ecmascript}, p.\ 2.}

\footnotetext{I use a syntax similar to C++ in my examples.}

%% \begin{minted}[]{c++}
%% typedef Index<Url, Page> Webcache;
%% Webcache cache;

%% Page get(Url u) {
%%   Page p = cache.search(u);

%%   if (p != null && !p.expired()) return p;

%%   p = http_get(u);

%%   if (p == null) cache.remove(u);
%%   else           cache.insert(u, p);

%%   return p;
%% }
%% \end{minted}

%% This small example illustrates the entire \API.
%% Let's look at it a bit more formally.
%% The index is an \emph{abstract} data type,\footnote{Also called a \emph{container type}.}
%%   and cannot be used as-is;
%%   the \emph{key} and the \emph{value} must first be given a type.
%% The resulting \emph{concrete data type} can then be instantiated.
%% (In the above,
%%   \IC{Index} is the abstract data type,
%%   and \IC{Webcache} is the concrete data type,
%%   with \IC{Url}s as keys
%%   and \IC{Page}s as values.)
%% We say that an index `maps \IC{K}s onto \IC{V}s'
%%   if its key type is \IC{K}
%%   and its value type is \IC{V}.
%% Given an index \IC{i}
%%   that maps \IC{K}s onto \IC{V}s,
%%   we can specify the semantics of operations on it.
%% In the following,
%%   the variable \IC{key} is of type \IC{K},
%%   and the variable \IC{value} is of type \IC{V}:

%% \begin{description}

%% %%%%% search
%% \item[\IC{value = i.search(key);}\footnotemark]
%% If there is a value associated with \IC{key} in \IC{i},
%%   \IC{value} will be that value.
%% Otherwise, \IC{value} will be \IC{null}.\footnotemark

%% \footnotetext{
%% The \IC{search} function is also called
%%   \IC{find}, \IC{fetch}, \IC{read}, and \IC{get}.
%% }

%% \footnotetext{
%% Note that with a \IC{null} type,
%%   an index can be seen as a \emph{total} function.
%% }

%% %%%%% insert
%% \item[\IC{i->insert(key, value);}\footnotemark]
%% Subsequent calls to \IC{i->search(key)} will return \IC{value}
%%   (until subsequent calls to \IC{i->insert(k, —)} or \IC{i->remove(k)},
%%    where \IC{k == key}).

%% \footnotetext{
%% The \IC{insert} function is also called
%%   \IC{store}, \IC{set}, \IC{save}, and \IC{add}.
%% }

%% %%%%% remove
%% \item[\IC{i->remove(key);}\footnotemark]
%% Subsequent calls to \IC{i.read(key)} will return \IC{null}
%%   (until subsequent calls to \IC{i->insert(k, —)} or \IC{i->remove(k)},
%%    where \IC{k == key}).

%% \footnotetext{
%% The \IC{remove} function is also called
%%   \IC{delete}.
%% It may also be absent,
%%   in favour of \IC{insert(k, null)}
%%   (suggesting the `total function' interpretation).
%% }
%% \end{description}
